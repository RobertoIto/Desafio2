# Versão do docker compose
version: '3'

# Serviços, no caso os containers node e nginx
services:
  node:
    build:
      context: ./node
    image: robertohito/node:latest
    container_name: node
    # O dockerize está dando erro, então utilizei o node.depends_on 
    # com rhidb.healthcheck. 
    # entrypoint: dockerize -wait tcp://localhost:3306
    # entrypoint: dockerize -wait tcp://rhidb:3306
    networks:
      - nodenet
    # ports: 
    #   - "3000:3000"
    expose:
      - "3000"
    depends_on:
      rhidb:
        condition: service_healthy
    # O health check é utilizado em conjunto com o depends_on no
    # outro servidor, no caso, o dockerize não funcionou corretamente.
    healthcheck:
      test: "curl --fail http://localhost:3000/ || exit 1"
      interval: 4s
      timeout: 3s
      retries: 5       

  nginx:
    build: 
      context: ./nginx
    image: robertohito/nginx:latest
    container_name: nginx
    networks:
      - nodenet
    ports:
      - "8080:8080"
    depends_on:
      node:
        condition: service_healthy

  rhidb:  
    build: 
      context: ./mysql
    image: robertohito/rhidb:latest
    container_name: rhidb
    command: --innodb-use-native-aio=0
    restart: always
    tty: true
    networks:
      - nodenet
    ports:
      - "3306:3306"
    expose:
      - "3306"
    # O health check é utilizado em conjunto com o depends_on no
    # outro servidor, no caso, o dockerize não funcionou corretamente.
    healthcheck:
      test: "/usr/bin/mysql --user=rito --password=rito --execute \"SHOW DATABASES;\""
      interval: 2s
      timeout: 20s
      retries: 10

# É preciso selecionar as redes envolvidas
networks:
  nodenet:
    driver: bridge
